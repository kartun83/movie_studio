# MovieService HTTP Tests
@baseUrl = http://localhost:4004/odata/v4

### Get Service Metadata Document
GET {{baseUrl}}/movie/$metadata

> {% client.test('status 200', () => { client.assert(response.status === 200, 'Expected 200'); }); %}

### Get all movies
GET {{baseUrl}}/movie/Movies

> {% client.test('status 200', () => {
    client.assert(response.status === 200, 'Expected 200');
    client.assert(Array.isArray(response.body.value), 'Response should be array');
    client.assert(response.body.value.some(m => m.ID === 'MOV100'), 'Should contain MOV100');
    client.assert(response.body.value.some(m => m.title === 'Test Movie'), 'Should contain Test Movie');
}); %}

### Get movie by ID
GET {{baseUrl}}/movie/Movies('MOV100')

> {% client.test('status 200', () => {
    client.assert(response.status === 200, 'Expected 200');
    client.assert(response.body.ID === 'MOV100', 'ID should be MOV100');
    client.assert(response.body.title === 'Test Movie', 'Title should be Test Movie');
    client.assert(response.body.budget === 1000000, 'Budget should be 1000000');
}); %}

### Get all persons
GET {{baseUrl}}/movie/Persons

> {% client.test('status 200', () => {
    client.assert(response.status === 200, 'Expected 200');
    client.assert(Array.isArray(response.body.value), 'Response should be array');
    client.assert(response.body.value.some(p => p.ID === 'C0FCEA30-11B0-D720-47B6-EBA426D2EAC8'), 'Should contain James Rodriguez');
}); %}

### Get all castings
GET {{baseUrl}}/movie/Castings

> {% client.test('status 200', () => {
    client.assert(response.status === 200, 'Expected 200');
    client.assert(Array.isArray(response.body.value), 'Response should be array');
    client.assert(response.body.value.some(c => c.ID === 'CAST100'), 'Should contain CAST100');
}); %}

### Get all expenses
GET {{baseUrl}}/movie/Expenses

> {% client.test('status 200', () => {
    client.assert(response.status === 200, 'Expected 200');
    client.assert(Array.isArray(response.body.value), 'Response should be array');
    client.assert(response.body.value.some(e => e.ID === 'EXP100'), 'Should contain EXP100');
}); %}

### Get all assets
GET {{baseUrl}}/movie/Assets

> {% client.test('status 200', () => {
    client.assert(response.status === 200, 'Expected 200');
    client.assert(Array.isArray(response.body.value), 'Response should be array');
    client.assert(response.body.value.length > 0, 'Should have at least one asset');
}); %}

### Test getTotalBudget function
POST {{baseUrl}}/movie/getTotalBudget
Content-Type: application/json

{}

> {% client.test('status 200', () => {
    client.assert(response.status === 200, 'Expected 200');
    client.assert(typeof response.body === 'number' || typeof response.body === 'object', 'Should return a number or object');
}); %}

### Test closeProject action
POST {{baseUrl}}/movie/closeProject
Content-Type: application/json

{
  "projectId": "MOV100",
  "finalComment": "Project completed successfully."
}
> {% client.test('status 200', () => {
    client.assert(response.status === 200, 'Expected 200');
    client.assert(response.body.ID === 'MOV100', 'ID should be MOV100');
}); %}

### Get upcoming releases
GET {{baseUrl}}/movie/UpcomingReleases

> {% client.test('status 200', () => {
    client.assert(response.status === 200, 'Expected 200');
    client.assert(Array.isArray(response.body.value), 'Response should be array');
    client.assert(response.body.value.some(m => m.ID === 'MOV100'), 'Should contain MOV100');
}); %} 